# Name of the workflow as it will appear in the GitHub Actions dashboard
name: Fuzz Testing

# Trigger the workflow
on:
  # Trigger the workflow using a cron schedule
  schedule:
    # the workflow will run at 12:00 PM every Monday
    - cron: '0 12 * * 1'  

  # Run the workflow on pushes to the 'main' branch
  push:
    branches:
      - main

  # Run the workflow on pull requests targeting the 'main' branch
  pull_request:
    branches:
      - main
  
  # Allows manual triggering of the workflow
  workflow_dispatch: 

jobs:
  test-fuzz:
    
    strategy:
      matrix:
        range:
          - {start: 0, end: 5}
          - {start: 5, end: 10}

    # The type of machine that the job will run on (Ubuntu in this case)
    runs-on: ubuntu-latest

    steps:
    # Step 1: Check out the code from the repository
    - name: Checkout code
      uses: actions/checkout@v3  

    # Step 2: Set up Go environment
    - name: Set up Go
      uses: actions/setup-go@v3  
      with:
        go-version: '1.23.2'

    # Step 3: Run the fuzz tests and store the report inside 'reports/'
    - name: Run tests for range ${{ matrix.range.start }}-${{ matrix.range.end }}
      run: |
        mkdir -p reports  # Ensure the reports directory exists
        go test -v -run '^TestFuzzer$' -args -start=${{ matrix.range.start }} -end=${{ matrix.range.end }} > reports/report-${{ matrix.range.start }}-to-${{ matrix.range.end }}.txt

    # Step 4: Upload the report as an artifact
    - name: Upload Fuzz Test Report
      if: always()  # Ensure this step runs even if tests fail
      uses: actions/upload-artifact@v4
      with:
        name: test-report-${{ matrix.range.start }}-to-${{ matrix.range.end }}
        path: reports/report-${{ matrix.range.start }}-to-${{ matrix.range.end }}.txt
    
  aggregate:
    # This job waits for all 'test-fuzz' jobs to complete
    needs: test-fuzz  # Waits for all the test jobs to complete
    runs-on: ubuntu-latest

    steps:
      # Step 1: Download all reports
      - name: Download all reports
        uses: actions/download-artifact@v4
        with:
          path: ./reports  # Artifacts will be downloaded into this folder

      # Step 2: Move all report files from subdirectories into 'reports'
      - name: Move report files
        run: |
            find ./reports -type f -name '*.txt' -exec mv {} ./reports/ \;

      # Step 3: Aggregate all reports into one file
      - name: Aggregate reports
        run: |
            cat ./reports/*.txt > aggregated_report.txt
            echo "Aggregated report generated."

      # Step 4: Upload the aggregated report
      - name: Upload aggregated report
        uses: actions/upload-artifact@v4
        with:
          name: aggregated-fuzz-report
          path: aggregated_report.txt
